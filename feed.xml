<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://xubujie.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://xubujie.github.io/" rel="alternate" type="text/html" /><updated>2020-06-11T02:34:58-05:00</updated><id>https://xubujie.github.io/feed.xml</id><title type="html">Jay’s Blog</title><subtitle>Sharing my learning and idea</subtitle><entry><title type="html">From Word Embeddings To Document Distances详解</title><link href="https://xubujie.github.io/nlp/2020/06/11/From-Word-Embeddings-To-Document-Distances.html" rel="alternate" type="text/html" title="From Word Embeddings To Document Distances详解" /><published>2020-06-11T00:00:00-05:00</published><updated>2020-06-11T00:00:00-05:00</updated><id>https://xubujie.github.io/nlp/2020/06/11/From-Word-Embeddings-To-Document-Distances</id><content type="html" xml:base="https://xubujie.github.io/nlp/2020/06/11/From-Word-Embeddings-To-Document-Distances.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-06-11-From-Word-Embeddings-To-Document-Distances.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;1.-&amp;#31616;&amp;#20171;&quot;&gt;1. &amp;#31616;&amp;#20171;&lt;a class=&quot;anchor-link&quot; href=&quot;#1.-&amp;#31616;&amp;#20171;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;《From Word Embeddings To Document Distances》这篇文章，发表于2014年。作者在word2vec的基础上提出了一种衡量文章相似度的尺度，Word Mover's Distance(WDM)。 WDM用来描述两篇文章的词向量之间的距离。这里的“距离”作者用了“旅行距离”来描述，意思是从一篇文章的词向量转换到另一篇文章的词向量的最短距离。在此距离的基础上，作者提出了衡量文章相似度的算法。从实验可以看出，该方法优于当时的SOTA。&lt;/p&gt;
&lt;p&gt;下文会按照作者的思路来详细介绍WDM的定义和文章相似度的计算方法（站在作者角度来想）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在计算文章相似度的问题中，前人的方法只考虑词频，没有考虑文章的意义，把word2vec用到文章相似度的评价里会不会有所提高呢？&lt;/li&gt;
&lt;li&gt;那么我来定义了一种新的计算文章相似度的方法WMD。&lt;/li&gt;
&lt;li&gt;可是WMD的计算复杂度太高。那我提出计算下限的方法WCD和RWMD。&lt;/li&gt;
&lt;li&gt;有了WCD和RWMD，然后通过Prefetch和Prune来找到一个文章的k nearest neighbors。&lt;/li&gt;
&lt;li&gt;看看我的实验结果多牛叉。超过了当时的SOTA。&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;2.-&amp;#35770;&amp;#25991;&amp;#35814;&amp;#35299;&quot;&gt;2. &amp;#35770;&amp;#25991;&amp;#35814;&amp;#35299;&lt;a class=&quot;anchor-link&quot; href=&quot;#2.-&amp;#35770;&amp;#25991;&amp;#35814;&amp;#35299;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;&amp;#19968;&amp;#12289;Word2Vec-Embedding&quot;&gt;&amp;#19968;&amp;#12289;Word2Vec Embedding&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#19968;&amp;#12289;Word2Vec-Embedding&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在2013年，Mikolov et al提出了word2vec，这个在当时引起了很大反响。该研究用向量来表示每个单词，从数学上更好的表示了单词的意义。传统上表示文章，大多数都是用BOW或者TFIDF的手法，这些手法对于词的意义有欠考虑，所以在衡量文章相似度上，往往停留在单词一致性的表层上，文章意思的相似性得不到很大的表现。作者关注到word2vec的发展，然后将该方法应用到了文章相似度的表达上。这里我们首先介绍以下word2vec。&lt;/p&gt;
&lt;p&gt;简单来说，word2vec是一种通过学习神经网络来寻找词向量表示的一种方法。具体来说word2vec的skip-gram模型是通过构建一个单层神经网络（input layer, projection layer, output layer)来预测每个单词的相邻单词。通过学习该神经网络，得到的projection layer即为每个单词的词向量。训练目标是使每个单词的相邻单词的出现概率最大化。该概率可以用下式表示
$$
\frac{1}{T}\sum_{t=1}^T\sum_{j \in nb(t)}logp(w_j|w_t) \tag{1}
$$&lt;/p&gt;
&lt;p&gt;这里T为单词数，nb(t)表示单词$w_t$的相邻单词，$p(w_j|w_t)$用hierarchical softmax来提高训练速度。&lt;/p&gt;
&lt;h3 id=&quot;&amp;#20108;&amp;#12289;Word-Move's-Distance&quot;&gt;&amp;#20108;&amp;#12289;Word Move's Distance&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#20108;&amp;#12289;Word-Move's-Distance&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先我们用词向量来定义Word travel cost。假设$x_i, x_j$表示word $i$和word $j$的词向量。我们用$c(i, j) = ||x_i - x_j||_2$来表示从一个词到另一个词的&quot;旅行距离&quot;（Word travel cost）。有了词于词之间的距离，接下来我们来定义文章间距离。设$d$, $d'$为两篇文章的nBow (normalized bag of words)表示。令$T_{ij}, T \in R^{n\times n}$来表示文章d的词i到文章d'的距离。我们令词i到文章d'的所有词的距离之和为$\sum_jT_{ij} = d_i$, 反之文章d'的词j到文章d的所有词之和为$\sum_iT_{ij}=d'_j$。最终，我们定义两个文章的距离为从一篇文章d到另一篇文章d‘距离的加权累加的最小值。用数学描述为
$$
\min_{T&amp;gt;=0}\sum_{i,j=1}^nT_{ij}c(i,j)　\\
subject \ to: \sum_{j=1}^nT_{i,j} = d_i, \forall_i \in \{1,...,n\} \\
\sum_{i=1}^nT_{i,j} = d'_j, \forall_j \in \{1,...,n\} \tag{2}
$$
所以，求解文章与文章之间的WMD转化为了一个最优化问题。&lt;/p&gt;
&lt;p&gt;通过下图简要举例介绍词数相同时文章间距离和词数不同时文章距离的情况。在上半部分，去除了（the, to ,in, a）等等stopwords之后，D0,D1,D2都是由4个不同的词构成的。所以，所有的词的$d_i=0.25$，这里的箭头表示的是$T_{ij}c(i,j)$, 由于词向量空间上，比起band，Obama离President更近，这里的分数也很好的反应了该结果。在图的下半部分，我们可以看出，当词数不同时，一个词可能会映射到多个相似的词。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images/copied_from_nb/images/WMD1.png&quot; alt=&quot;WMD1&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;&amp;#19977;&amp;#12289;&amp;#31867;&amp;#27604;&amp;#36816;&amp;#36755;&amp;#38382;&amp;#39064;&quot;&gt;&amp;#19977;&amp;#12289;&amp;#31867;&amp;#27604;&amp;#36816;&amp;#36755;&amp;#38382;&amp;#39064;&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#19977;&amp;#12289;&amp;#31867;&amp;#27604;&amp;#36816;&amp;#36755;&amp;#38382;&amp;#39064;&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;运输问题的典型情况是研究单一品种物质的运输调度问题：设某种物品有m个产地$A_1，A_2，···，A_m$，各产地的产量分别是$a_1，a_2，···，a_m$,有n个销地$B_1，B_2，···，B_n$，各个销地的销量分别为$b_1，b_2，···，b_n$。假定从产地$A_i(i=1,2,···,m)$向销地$B_j(j=1,2,···,n)$运输单位物品的运价为$c_{ij}$，怎么调运这些物品才能使总运费最小？可以看出，文章的WMD计算和运输问题是完全对应的。这里产地$A_1，A_2，···，A_m$对应于文章A的单词，$a_1，a_2，···，a_m$为单词的词频。同理$B_1，B_2，···，B_n$为文章B的单词，$b_1，b_2，···，b_n$为对应的词频。运价$c_{ij}$对应于文章A的单词和文章B的单词间的欧拉距离。运输问题可以描述成以下线性规划问题。&lt;/p&gt;
$$
\min_z = \sum_{i=1}^m\sum_{j=1}^nc_{ij}x_{ij} \\
subject \ to: \sum_{j=1}^nx_{i,j} = a_i, \forall_i \in \{1,...,n\} \\
\sum_{i=1}^nx_{i,j} = b_j, \forall_j \in \{1,...,n\}  \\
x_{ij} \geq 0 \tag{3}
$$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;&amp;#22235;&amp;#12289;Fast-Distance-Computation&quot;&gt;&amp;#22235;&amp;#12289;Fast Distance Computation&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#22235;&amp;#12289;Fast-Distance-Computation&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;解决上述WMD最优化问题的复杂度时$O(p^3\log p)$, p为去重后单词数。可以想象，当文章有很多单词时，计算WMD会变的非常困难。为此，作者提出了两种求解WMD下限的方法&lt;/p&gt;
&lt;h5 id=&quot;WCD&amp;#65306;&amp;#36890;&amp;#36807;&amp;#19977;&amp;#35282;&amp;#19981;&amp;#31561;&amp;#24335;$||x+y||-\leq-||x||-+-||y||$&amp;#65292;&amp;#25105;&amp;#20204;&amp;#21487;&amp;#20197;&amp;#31616;&amp;#21333;&amp;#30340;&amp;#24471;&amp;#21040;&quot;&gt;WCD&amp;#65306;&amp;#36890;&amp;#36807;&amp;#19977;&amp;#35282;&amp;#19981;&amp;#31561;&amp;#24335;$||x+y|| \leq ||x|| + ||y||$&amp;#65292;&amp;#25105;&amp;#20204;&amp;#21487;&amp;#20197;&amp;#31616;&amp;#21333;&amp;#30340;&amp;#24471;&amp;#21040;&lt;a class=&quot;anchor-link&quot; href=&quot;#WCD&amp;#65306;&amp;#36890;&amp;#36807;&amp;#19977;&amp;#35282;&amp;#19981;&amp;#31561;&amp;#24335;$||x+y||-\leq-||x||-+-||y||$&amp;#65292;&amp;#25105;&amp;#20204;&amp;#21487;&amp;#20197;&amp;#31616;&amp;#21333;&amp;#30340;&amp;#24471;&amp;#21040;&quot;&gt; &lt;/a&gt;&lt;/h5&gt;$$
\sum_{i,j=1}^nT_{ij}c(i,j) = \sum_{i,j=1}^nT_{ij}||x_i-x'_j||_2 \\
= \sum_{i,j=1}||T_{ij}(x_i-x'_j)||_2 \geq ||\sum_{i,j=1}^nT_{ij}(x_i-x'_j)||_2 \\
= ||\sum_{i=1}^n(\sum_{j=1}^nT_{ij})x_i-\sum_{j=1}^n(\sum_{j=1}^nT_{ij})x'_j||_2 \\
= ||\sum_{i=1}^nd_ix_i - \sum_{j=1}^nd'_jx'_j||_2 \tag{4}
$$&lt;p&gt;作者将这个距离称为Word Centroid Distance（WCD），可以看出计算这个WMD的下限WCD非常快，算法复杂度是O(dp), d为词向量的维度，p为去重后的单词数。在寻找某篇文章的k个最相似的文章时，WCD可以用于寻找有利的候补，从而提高算法效率。&lt;/p&gt;
&lt;h5 id=&quot;RWMD&amp;#65306;&amp;#34429;&amp;#28982;WCD&amp;#24456;&amp;#23481;&amp;#26131;&amp;#35745;&amp;#31639;&amp;#65292;&amp;#20294;&amp;#26159;&amp;#22240;&amp;#20026;&amp;#20182;&amp;#32473;&amp;#20986;&amp;#30340;&amp;#19979;&amp;#38480;&amp;#22826;&amp;#20302;&amp;#65292;&amp;#20316;&amp;#32773;&amp;#22312;&amp;#36825;&amp;#37324;&amp;#25552;&amp;#20986;&amp;#20102;&amp;#19968;&amp;#31181;&amp;#26356;&amp;#21152;&amp;#36924;&amp;#36817;&amp;#30495;&amp;#23454;&amp;#20540;&amp;#30340;&amp;#19979;&amp;#38480;Relaxed-word-moving-distance&amp;#12290;&quot;&gt;RWMD&amp;#65306;&amp;#34429;&amp;#28982;WCD&amp;#24456;&amp;#23481;&amp;#26131;&amp;#35745;&amp;#31639;&amp;#65292;&amp;#20294;&amp;#26159;&amp;#22240;&amp;#20026;&amp;#20182;&amp;#32473;&amp;#20986;&amp;#30340;&amp;#19979;&amp;#38480;&amp;#22826;&amp;#20302;&amp;#65292;&amp;#20316;&amp;#32773;&amp;#22312;&amp;#36825;&amp;#37324;&amp;#25552;&amp;#20986;&amp;#20102;&amp;#19968;&amp;#31181;&amp;#26356;&amp;#21152;&amp;#36924;&amp;#36817;&amp;#30495;&amp;#23454;&amp;#20540;&amp;#30340;&amp;#19979;&amp;#38480;Relaxed word moving distance&amp;#12290;&lt;a class=&quot;anchor-link&quot; href=&quot;#RWMD&amp;#65306;&amp;#34429;&amp;#28982;WCD&amp;#24456;&amp;#23481;&amp;#26131;&amp;#35745;&amp;#31639;&amp;#65292;&amp;#20294;&amp;#26159;&amp;#22240;&amp;#20026;&amp;#20182;&amp;#32473;&amp;#20986;&amp;#30340;&amp;#19979;&amp;#38480;&amp;#22826;&amp;#20302;&amp;#65292;&amp;#20316;&amp;#32773;&amp;#22312;&amp;#36825;&amp;#37324;&amp;#25552;&amp;#20986;&amp;#20102;&amp;#19968;&amp;#31181;&amp;#26356;&amp;#21152;&amp;#36924;&amp;#36817;&amp;#30495;&amp;#23454;&amp;#20540;&amp;#30340;&amp;#19979;&amp;#38480;Relaxed-word-moving-distance&amp;#12290;&quot;&gt; &lt;/a&gt;&lt;/h5&gt;&lt;p&gt;想法很简单，就是去掉一个WMD的约束条件。假设去除第二个约束条件，原式变成
$$
\min_{T&amp;gt;=0}\sum_{i,j=1}^nT_{ij}c(i,j)　\\
subject \ to: \sum_{j=1}^nT_{i,j} = d_i, \forall_i \in \{1,...,n\} \tag{5}
$$
因为在所有满足WMD的解之中，肯定也可以找到一个满足RWMD的解，所以RWMD可以作为WMD的一个下限。从直观上理解，去掉约束条件后，文章B的词语并不一定都要被映射到，我们只要让每一个文章A的词语都旅行到文章B即可（举个极端的例子，文章A的所有词语都映射到文章B的某一个词）。类比于运输问题，即是我们只对产量有要求，对销量没有要求。在这种情况下，可想而知，我们只要让文章A的所有词都映射到离其词向量最近的点即可得到最优解。
$$
T_{ij}^* = \begin{cases}
d_{i}\ if j=argmin_{j}c(i,j) \\
0 \ otherwise.
\end{cases} \tag{6}
$$
可以得到
$$
\sum_jT_{ij}c(i,j) \geq \sum_jT_{ij}^*c(i,j) \tag{7}
$$
因为计算RWMD只需要找个离每个词语的最近的词，他的复杂度是$O(p^2)$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;&amp;#20116;&amp;#12289;Prefetch-and-prune&quot;&gt;&amp;#20116;&amp;#12289;Prefetch and prune&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#20116;&amp;#12289;Prefetch-and-prune&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者利用上述WCD和RWMD提出了一种快速查找某文章的k nearest neighbors的算法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算所有文章对该文章的WCD，然后按升序排序&lt;/li&gt;
&lt;li&gt;计算前k个文章的WMD（计算k nearest neighbors的WMD）&lt;/li&gt;
&lt;li&gt;然后来计算剩余文章的RWMD，如果某文章的RWMD大于第k个文章的WMD，那么就不再考虑该文章。反之，我们更新k nearest neighbors&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;&amp;#20845;&amp;#12289;&amp;#32467;&amp;#26524;&quot;&gt;&amp;#20845;&amp;#12289;&amp;#32467;&amp;#26524;&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#20845;&amp;#12289;&amp;#32467;&amp;#26524;&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;通过以下结果可知，这种计算文章距离的算法击败了当时大部分的SOAT。
&lt;img src=&quot;//images/copied_from_nb/images/WMD2.png&quot; alt=&quot;WDM2&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;3.-&amp;#24605;&amp;#32771;&quot;&gt;3. &amp;#24605;&amp;#32771;&lt;a class=&quot;anchor-link&quot; href=&quot;#3.-&amp;#24605;&amp;#32771;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在有了word2vec后，计算文章距离的想法其实很容易就能够想到。不过如果没有近似算法，那么就没有实际利用价值。做科研，理论和实践两手都要硬啊。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;div class=&quot;footnotes&quot;&gt;&lt;p id=&quot;fn-1&quot;&gt;1. &lt;a href=&quot;http://proceedings.mlr.press/v37/kusnerb15.pdf&quot;&gt;From Word Embeddings To Document Distances&lt;/a&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote footnotes&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;footnotes&quot;&gt;&lt;p id=&quot;fn-2&quot;&gt;2. &lt;a href=&quot;https://baike.baidu.com/item/%E8%BF%90%E8%BE%93%E9%97%AE%E9%A2%98/12734790?fr=aladdin&quot;&gt;百度百科：运输问题&lt;/a&gt;&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote footnotes&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Bujie Xu</name></author><summary type="html"></summary></entry></feed>